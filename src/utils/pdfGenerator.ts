import jsPDF from 'jspdf';import html2canvas from 'html2canvas';import { SearchResult } from '../types';export const generateCustomerPDF = async (person: SearchResult) => {    // Create a PDF document    const pdf = new jsPDF('p', 'mm', 'a4');    const pageWidth = pdf.internal.pageSize.getWidth();        // Set fonts    pdf.setFont("helvetica");        // Add logo (placeholder for actual logo)    pdf.setFontSize(26);    pdf.setTextColor(112, 48, 160); // Purple color for IDENFO    pdf.text("IDENFO", pageWidth - 50, 20);    pdf.setFontSize(20);    pdf.setTextColor(250, 200, 0); // Yellow color for direct    pdf.text("direct", pageWidth - 20, 20, { align: 'left' });    pdf.setTextColor(0, 0, 0); // Reset to black        // Screening Hit Details Section    pdf.setFontSize(18);    pdf.text("Screening Hit Details", 14, 40);        // Table headers for Hit Details    const createTableHeader = (yPos: number) => {        pdf.setFillColor(230, 230, 230);        pdf.rect(14, yPos, pageWidth - 28, 8, 'F');        pdf.setFontSize(10);        pdf.setFont("helvetica", "bold");        pdf.text("Hit Details", 16, yPos + 5);        pdf.text("Keyword", 75, yPos + 5);        pdf.text("Source", 130, yPos + 5);        pdf.text("Score", 170, yPos + 5);        pdf.text("Hit Determination", 180, yPos + 5);        pdf.text("Comments", 235, yPos + 5);    };        createTableHeader(45);        // Add Hit Details data    pdf.setFont("helvetica", "normal");    pdf.setFontSize(9);        // Get simple dataset without the URL/link    const getDatasetText = (dataset: string): string => {        if (!dataset) return 'Unknown';                if (dataset === 'onboarded') return 'Onboarded';        if (dataset.includes('peps')) return 'PEP';        if (dataset.includes('terrorists')) return 'Terrorist';        if (dataset.includes('sanctions')) return 'Sanctions';        if (dataset.includes('debarment')) return 'Debarred';                return dataset;    };        // Add Audit section    pdf.setFontSize(18);    pdf.text("Audit", 14, 65);        // Table headers for Audit    createTableHeader(70);        // Add audit data    const today = new Date();    const formattedDate = today.toLocaleDateString('en-US', {         day: 'numeric',         month: 'long',         year: 'numeric'     });    const time = today.toLocaleTimeString('en-US', {        hour: '2-digit',        minute: '2-digit',        second: '2-digit',        hour12: false    });        pdf.setFont("helvetica", "normal");    pdf.setFontSize(9);    pdf.text(formattedDate + ", " + time, 16, 80);    pdf.text("System User", 75, 80);    pdf.text("Name Screening has been approved", 180, 80);        // Add Sanctions sources explanation box    pdf.setFillColor(240, 240, 240);    pdf.rect(14, 90, pageWidth - 28, 70, 'F');        pdf.setFontSize(10);    const sources = [        { name: "HMT", desc: "– His Majesty's Treasury, UK, Financial sanctions targets; list of all asset freeze targets" },        { name: "EU", desc: "– Consolidated list of persons, groups and entities subject to European Union financial sanctions" },        { name: "OFAC", desc: "– US Treasury, Office of Foreign Assets Control, Specially Designated Nationals And Blocked Persons List (SDN)" },        { name: "UN", desc: "– United Nations Security Council Consolidated Sanction list" },        { name: "MOI", desc: "– Qatari unified record of persons and entities designated on Sanction List" },        { name: "NACTA", desc: "– Pakistani National Counter Terrorism Authority Sanction List" },        { name: "UAE Local Terrorist", desc: "– List produced by UAE Executive Office for Control & Non Proliferation" },    ];        let yPos = 95;    sources.forEach(source => {        pdf.setFont("helvetica", "bold");        pdf.text(source.name, 20, yPos);        pdf.setFont("helvetica", "normal");        pdf.text(source.desc, 60, yPos);        yPos += 10;    });        // Add Customer Information section    pdf.setFontSize(18);    pdf.text("Customer Information", 14, 175);        // Table for customer info    const addRow = (label: string, value: string, yPos: number) => {        // Add gray background for every other row        if (yPos % 14 === 0) {            pdf.setFillColor(240, 240, 240);            pdf.rect(14, yPos - 5, pageWidth - 28, 10, 'F');        }                pdf.setFont("helvetica", "normal");        pdf.setFontSize(10);        pdf.text(label, 16, yPos);        pdf.text(value || 'N/A', 80, yPos);    };        let infoYPos = 185;    addRow("Idenfo Id", person.id.toString(), infoYPos);    infoYPos += 10;    addRow("Full Name", person.name, infoYPos);    infoYPos += 10;    addRow("Country of Residence", person.country || 'N/A', infoYPos);    infoYPos += 10;    addRow("Resident Status", "Resident", infoYPos);    infoYPos += 10;    addRow("Date of Birth", "N/A", infoYPos);    infoYPos += 10;    addRow("Nationality", person.country || 'N/A', infoYPos);    infoYPos += 10;    addRow("Delivery Channel", "Face to Face", infoYPos);    infoYPos += 10;    addRow("Name Screening Hit", person.dataset && person.dataset !== 'onboarded' ? "YES" : "NO", infoYPos);    infoYPos += 10;    addRow("Documents Verification Hit", "NO", infoYPos);    infoYPos += 10;    addRow("Risk Rating Hit", "NO", infoYPos);    infoYPos += 10;    addRow("Status", "approved", infoYPos);    infoYPos += 10;    addRow("Category", getDatasetText(person.dataset), infoYPos);        // Add Key Findings section    pdf.setFontSize(18);    pdf.text("Key Findings", 14, infoYPos + 20);        // Table for key findings    infoYPos += 30;    addRow("Total Matches", "0", infoYPos);    infoYPos += 10;    addRow("Resolved Matches", "0", infoYPos);    pdf.text("Genuine: 0", 150, infoYPos);    pdf.text("Not Genuine: 0", 200, infoYPos);    infoYPos += 10;    addRow("Unresolved Matches", "0", infoYPos);        // Risk Ratings section    pdf.setFontSize(18);    pdf.text("Risk Ratings", 14, infoYPos + 20);        // Create risk factor table header    infoYPos += 30;    pdf.setFillColor(230, 230, 230);    pdf.rect(14, infoYPos - 5, pageWidth - 28, 10, 'F');    pdf.setFont("helvetica", "bold");    pdf.text("Risk factor matrix", 16, infoYPos);    pdf.text("Score", 150, infoYPos);    pdf.text("Level", 200, infoYPos);        // Risk factor data    const riskLevelText = person.riskLevel >= 85 ? "high" : person.riskLevel >= 60 ? "medium" : "low";    infoYPos += 10;    addRow("Country of Residence", "5", infoYPos);    pdf.text("medium", 200, infoYPos);    infoYPos += 10;    addRow("Base Rating", "5", infoYPos);    pdf.text(riskLevelText, 200, infoYPos);    infoYPos += 10;    addRow("Overall Rating", riskLevelText, infoYPos);    pdf.text(riskLevelText, 200, infoYPos);
    
    // Add disclaimer at the bottom
    const disclaimer = "This report is generated automatically for AML compliance purposes. This document contains confidential information and should be handled accordingly.";
    pdf.setFontSize(8);
    pdf.setTextColor(120, 120, 120);
    
    const splitDisclaimer = pdf.splitTextToSize(disclaimer, pageWidth - 40);
    pdf.text(splitDisclaimer, pageWidth / 2, 280, { align: 'center' });
    
    // Save PDF with person's name
    const fileName = `Customer_Report_${person.name.replace(/\s+/g, '_')}.pdf`;
    pdf.save(fileName);
}; 